@page "/"
@using TheoryProtocol.Components.Layout
@using TheoryProtocol.Models
@inject UserService us

<PageTitle>Home</PageTitle>


<MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
<MudText Class="mb-8">Welcome to your new app, powered by MudBlazor and the .NET 8 Template!</MudText>

@if (!SummaryIsShown)
{
    <MudText Align="Align.Center" Typo="Typo.h1">Index</MudText>
    <MudPaper Class="d-flex justify-center align-start flex-grow-1 gap-4" Elevation="0">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Style="width: 300px" @onclick="Click">Open to see the latest stories!</MudButton>
    </MudPaper>
}
else
{
    
    <Summary></Summary>
    <h1>@SummaryId</h1>
}
<MudAlert Severity="Severity.Normal">
    You can find documentation and examples on our website here:
    <MudLink Href="https://mudblazor.com" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
        <b>www.mudblazor.com</b>
    </MudLink>
</MudAlert>

<br />
<MudText Typo="Typo.h5" GutterBottom="true">Interactivity in this Template</MudText>
<br />
<MudText Typo="Typo.body2">
    When you opt for the "Global" Interactivity Location, <br />
    the render modes are defined in App.razor and consequently apply to all child components.<br />
    In this case, providers are globally set in the MainLayout.<br />
    <br />
    On the other hand, if you choose the "Per page/component" Interactivity Location,<br />
    it is necessary to include the MyMudProviders component on every interactive page.<br />
    <br />
    If a render mode is not specified for a page, it defaults to Server-Side Rendering (SSR),<br />
    similar to this page. While MudBlazor allows pages to be rendered in SSR,<br />
    please note that interactive features, such as buttons and dropdown menus, will not be functional.

    <ul>
        @foreach (var item in users)
        {
            <li>
                <br/> <b>@item.Username</b>
            </li>
        }
    </ul>
</MudText>

@code
{
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }
    [Parameter] public bool SummaryIsShown { get; set; } = true;
    [Parameter] public EventCallback<bool> SummaryIsShownChanged { get; set; }
    public int SummaryId { get; set; }
    
    async Task Click()
    {
        await MainLayout.drawerComponent.DrawerToggle();
        
    }
}
<br />
<MudText Typo="Typo.h5" GutterBottom="true">What's New in Blazor with the Release of .NET 8</MudText>
<br />
<MudText Typo="Typo.h6" GutterBottom="true">Prerendering</MudText>
<MudText Typo="Typo.body2" GutterBottom="true">
    If you're exploring the features of .NET 8 Blazor,<br /> you might be pleasantly surprised to learn that each page is prerendered on the server,<br /> regardless of the selected render mode.<br /><br />
    This means that you'll need to inject all necessary services on the server,<br /> even when opting for the wasm (WebAssembly) render mode.<br /><br />
    This prerendering functionality is crucial to ensuring that WebAssembly mode feels fast and responsive,<br /> especially when it comes to initial page load times.<br /><br />
    For more information on how to detect prerendering and leverage the RenderContext, you can refer to the following link:
    <MudLink Href="https://github.com/dotnet/aspnetcore/issues/51468#issuecomment-1783568121" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
        More details
    </MudLink>
</MudText>

<br />
<MudText Typo="Typo.h6" GutterBottom="true">InteractiveAuto</MudText>
<MudText Typo="Typo.body2">
    A discussion on how to achieve this can be found here:
    <MudLink Href="https://github.com/dotnet/aspnetcore/issues/51468#issue-1950424116" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
        More details
    </MudLink>
</MudText>

@code {
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        users = await us.GetUsers();
    }
}