@using TheoryProtocol.Components.Layout
@inject IDialogService DialogService
@using TheoryProtocol.Models
@inject CanvasService cs

<MudAppBar Elevation="0">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
    <MudSpacer/>
    <!--<MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank"/>-->
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Secondary" Link="https://github.com/ALMLAMBO/TheoryProtocol" Target="_blank"/>
</MudAppBar>
<MudDrawer @bind-Open="DrawerOpen" Style="border:1px solid black" Elevation="1">
    <MudDrawerHeader>
        @*<MudPaper Class="d-flex flex-column align-content-center flex-wrap flex-grow-1 gap-4" Elevation="0">
            <MudText Typo="Typo.h6">MudBlazorTemplates1</MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" @onclick="OpenOverlay">Create</MudButton>
        </MudPaper>*@

        <MudPaper Class="d-flex flex-column align-content-center flex-wrap flex-grow-1 gap-4" Elevation="0" Style="background-color:#093125;">
            <div class="d-flex flex-column justify-center" style="background-color:#093125;">
                <div class="d-flex flex-row">
                    <MudImage ObjectPosition="ObjectPosition.Center" Style="width:50%; height:auto; text-align:center;" Src="img/bunny.png"/>

                    <MudText Typo="Typo.h5" Style="font-family: Impact; color:#FCB604;margin-left:10px;">
                        <div>The</div>
                        <div>Rabbit</div>
                        <div>Hole</div>
                    </MudText>
                </div>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Info" @onclick="OpenOverlay" Style="margin-top: 10px"/>
            </div>
            @*temp for now*@
            @foreach (var item in Canvases)
            {
                
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(()=>SummaryShow(item.Id))">@item.Name</MudButton>
                //when we have the models just use Model.Id for the SummaryShow parameter
            }
        </MudPaper>
    </MudDrawerHeader>
    <NavMenu/>
</MudDrawer>

@code {
    [Parameter] public bool DrawerOpen { get; set; } = true;
    [Parameter] public EventCallback<bool> DrawerOpenChanged { get; set; }
    //fill the list oninitialized
    List<Canvas> _canvasList = new List<Canvas>();
    
    
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private List<Models.Canvas> Canvases = new List<Models.Canvas>();


    public async Task DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
        await DrawerOpenChanged.InvokeAsync(DrawerOpen);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Canvases = await cs.GetCanvas();
    }

    private async Task SummaryShow(int id)
    {
        if (MainLayout.Home.Summary.showCanvas)
        {
            MainLayout.Home.Summary.showCanvas = false;
        }
        MainLayout.Home.SummaryIsShown = true;
        MainLayout.Home.SummaryId = id;
        await MainLayout.Home.SummaryIsShownChanged.InvokeAsync(MainLayout.Home.SummaryIsShown);
    }
    
    
    private void OpenOverlay()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true};
        DialogService.Show<CreateCanvasComponent>("Create Canvas", options);
    }

}