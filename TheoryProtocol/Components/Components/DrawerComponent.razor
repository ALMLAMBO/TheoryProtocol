@using TheoryProtocol.Components.Layout
@using TheoryProtocol.Models
@inject CanvasService cs

<MudAppBar Elevation="0">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
    <MudSpacer/>
    <!--<MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank"/>-->
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/ALMLAMBO/TheoryProtocol" Target="_blank" />
</MudAppBar>
<MudDrawer @bind-Open="DrawerOpen" Elevation="1">
    <MudDrawerHeader>
        <MudPaper Class="d-flex flex-column align-content-center flex-wrap flex-grow-1 gap-4" Elevation="0">
            <div class="d-flex justify-center">
            <MudImage ObjectPosition="ObjectPosition.Center" Style="width:50%; height:auto; text-align:center;" Src="img/bunny.png" />
            
            <MudText Typo="Typo.h5">The Rabbit Hole</MudText>
            </div>
            @*temp for now*@
            @foreach (var item in Canvases)
            {
                
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(()=>SummaryShow(item.Id))">@item.Name</MudButton>
                //when we have the models just use Model.Id for the SummaryShow parameter
            }
        </MudPaper>
    </MudDrawerHeader>
    <NavMenu/>
</MudDrawer>

@code {
    [Parameter] public bool DrawerOpen { get; set; } = true;
    [Parameter] public EventCallback<bool> DrawerOpenChanged { get; set; }
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private List<Models.Canvas> Canvases = new List<Models.Canvas>();


    public async Task DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
        await DrawerOpenChanged.InvokeAsync(DrawerOpen);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Canvases = await cs.GetCanvas();
    }

    private async Task SummaryShow(int id)
    {
        MainLayout.home.SummaryIsShown = true;
        MainLayout.home.SummaryId = id;
        await MainLayout.home.SummaryIsShownChanged.InvokeAsync(MainLayout.home.SummaryIsShown);
    }

}