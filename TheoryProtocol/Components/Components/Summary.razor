@page "/summary/{id:int}"
@using TheoryProtocol.Components.Layout
@using TheoryProtocol.Models
@using System.Text
@inject OpenAiService ai
@inject FactService fs
@inject NavigationManager NavigationManager;
<MudText Align="Align.Center" Typo="Typo.h2" Style="font-family: Impact">Summary</MudText>

<h1>@Id</h1>
@if (showCanvas)
{
    <Canvas Id="Id"></Canvas>
    
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShowCanvas">Show Board</MudButton>
    <MudText>@summary</MudText>   
}

@code
{
    [Parameter] public int Id { get; set; }
    public bool showCanvas = false;
    private string titleText = "";
    Canvas canvas;

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private string buttonText = "Show Board";
    private string summary = "";

    protected override async Task OnParametersSetAsync()
    {
        summary = "";
        List<Fact> facts = await fs.GetFactsByCanvasAsync(Id);
        StringBuilder sb = new StringBuilder();
        foreach (var fact in facts)
        {
            sb.Append(fact.Description);
        }
        summary=await ai.Prompt(sb.ToString() + "\n Summarize");
        showCanvas = false;
    }

    public void ShowCanvas()
    {
        showCanvas = !showCanvas;
        if (showCanvas)
        {
            buttonText = "Close Board";
        }
        else
        {
            buttonText = "Show Board";
        }

    }
}