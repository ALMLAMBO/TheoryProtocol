@using TheoryProtocol.Components.Layout
@using TheoryProtocol.Models
@inject OpenAiService ai
@inject FactService fs
<MudText Align="Align.Center" Typo="Typo.h2" Style="font-family: Impact">@MainLayout.Title</MudText>

@if (showCanvas)
{
    <Canvas @bind-ShowCanvas="showCanvas" Id="Id"></Canvas>
    
}

   <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShowCanvas">@buttonText</MudButton>
   <MudText>@summary</MudText>

@code
{
    [Parameter] public int Id { get; set; }
    public bool showCanvas = false;
    private string titleText = "";

    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    private string buttonText = "Show Board";
    private string summary = "";

    protected override async Task OnInitializedAsync()
    {
        List<Fact> facts = await fs.GetFactsByCanvasAsync(Id);
        string prompt = string.Join(" | ", facts);
        summary=await ai.Prompt(prompt + "\n Summarize");
    }
    public void ShowCanvas()
    {
        showCanvas = !showCanvas;
        if (showCanvas)
        {
            buttonText = "Close Board";
        }
        else
        {
            buttonText = "Show Board";
        }

    }
}