@using TheoryProtocol.Models
@using TheoryProtocol.Components.Layout
@inject CanvasService CanvasService
@inject FactService FactService;
<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator/>
            <MudTextField @bind-Value="model.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Dense" For="@(() => model.Name)"/>
            <MudTextField @bind-Value="model.Title" Label="Title" Variant="Variant.Text" Margin="Margin.Dense" For="@(() => model.Title)"/>
            <MudTextField @bind-Value="model.Description" Label="Description" Variant="Variant.Text" Margin="Margin.Dense" For="@(() => model.Description)"/>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Ok</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    private EditContext _editContext;
    private CreateCanvasModel model = new CreateCanvasModel();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int CanvasId { get; set; }
    [Parameter] public DrawerComponent DrawerComponent { get; set; }

    protected override Task OnInitializedAsync()
    {
        _editContext = new EditContext(model);
        return base.OnInitializedAsync();
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

    async Task SubmitForm()
    {
        if (_editContext.Validate())
        {
            Models.Canvas canvasModel = new Models.Canvas() { Name = model.Name, OwnerId = 0 };
            Fact newFact = new Fact() { CanvasId = CanvasId, Description = model.Description, Title = model.Title };
            FactService.AddFact(newFact);
            await CanvasService.AddCanvas(canvasModel);
            await DrawerComponent.UpdateSidebar();
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

}