@using TheoryProtocol.Models
@using Syncfusion.Blazor.Diagram
@inject FactService factService
@inject ConnectionService connService
@inject CommentService commentService
@inject IDialogService dialogService

<div style="margin-bottom: 15px">
    <MudNavMenu>
        <div class="d-flex flex-row">
            <MudButton Style="margin-right: 10px" Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => ShowCloseCreateDialog())">Create Fact</MudButton>
            <MudPopover Class="px-12 py-6" AnchorOrigin="Origin.BottomLeft" Open="@isCreateDialogOpen">
                <h3>Create fact</h3>
                <MudTextField Label="Name" @bind-Value="factTitle"/>
                <MudTextField Label="Description" @bind-Value="factDescription"/>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => SubmitNode())">Create</MudButton>
                <MudButton Style="margin-left: 10px" Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => CancelCreateNodeConnection())">Cancel</MudButton>
            </MudPopover>
            
            <MudButton Style="margin-right: 10px" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isCreateConnectionBtnDisabled" @onclick="@(() => ShowCloseConnectionDialog())">Create Connection</MudButton>
            <MudPopover Class="px-12 py-6" P AnchorOrigin="Origin.BottomLeft" Open="@isCreateConnectionOpen">
                <h3>Create connection</h3>
                @for (int i = 0; i < connectionsCount; i++)
                {
                    <div style="display: flex; flex-direction: row; margin-bottom: 10px">
                        <MudSelect T="string" Label="from" MultiSelection="false" @bind-SelectedValues="selectedFromFactTitle">
                            @* Super grozno *@
                            @foreach(var fact in selectedNodes)
                            {
                                <MudSelectItem Value="@facts.Where(x => x.Id.ToString() == fact.ID).Select(x => x.Title).First()"></MudSelectItem>
                            }
                        </MudSelect>
                        <MudSelect T="string" Label="To" MultiSelection="false" @bind-SelectedValues="selectedToFactTitle">
                            @foreach(var fact in nodes.Except(selectedNodes))
                            {
                                <MudSelectItem Value="@facts.Where(x => x.Id.ToString() == fact.ID).Select(x => x.Title).First()"></MudSelectItem>
                            }
                        </MudSelect>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" @onclick="() => AddConnection()"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Remove" @onclick="() => RemoveConnection()"/>
                    </div>
                }
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => SubmitConnections(selectedFromFactTitle, selectedToFactTitle))">Add</MudButton>
                <MudButton Style="margin-left: 10px" Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => CancelCreateConnections())">Cancel</MudButton>
            </MudPopover>
            
            <MudButton Style="margin-right: 10px" Variant="Variant.Filled" Color="Color.Primary" @onclick="ShowSummary">Summary</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ShowComments" Disabled="@isShowCommentsBtnDisabled">Show Comments</MudButton>
        </div>
    </MudNavMenu>
</div>

<SfDiagramComponent Width="100%" Height="600px" @bind-Nodes="@nodes" @bind-Connectors="@connectors" NodeCreating="NodeCreating" ConnectorCreating="ConnectorCreating" ID="id" SelectionChanged="OnSelectionChanged">
    <Layout Type="LayoutType.RadialTree" HorizontalSpacing="30" VerticalSpacing="30" Root="@root"></Layout>
    <SnapSettings Constraints="@SnapConstraints.None"></SnapSettings>
</SfDiagramComponent>

@code
{
    bool isCreateDialogOpen = false;
    bool isCreateConnectionOpen = false;
    bool isCommentsPanelHidden = true;
    string root;
    [Parameter] public bool ShowCanvas { get; set; } = false;
    [Parameter] public EventCallback<bool> ShowCanvasChanged { get; set; }

    // Fact details
    public int canvasId = 0;
    public int userId = 0;
    public string factTitle { get; set; }
    public string factDescription { get; set; }

    // Connection details
    private bool isCreateConnectionBtnDisabled = true;
    private bool isShowCommentsBtnDisabled = true;
    private int nodeConnectionCount = 1;
    private int connectionsCount = 1;
    private List<Node> selectedNodes = new List<Node>();
    private List<Connector> selectedConnectors = new List<Connector>();
    private IEnumerable<string> selectedFromFactTitle;
    private IEnumerable<string> selectedToFactTitle;

    // Collections for visual elements
    List<Fact> facts = new List<Fact>();
    List<Connection> connections = new List<Connection>();

    // Comment details
    //[CascadingParameter] MudDialogInstance MudCommentsDialog { get; set; }
    public List<Comment> comments { get; set; }

    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    DiagramObjectCollection<Connector> connectors = new DiagramObjectCollection<Connector>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            facts = await factService.GetFactsByCanvasAsync(0);
            connections = await connService.GetConnectionsByCanvasAsync(0);
            for (int i = 0; i < facts.Count; i++)
            {
                nodes.Add(new Node()
                    {
                        ID = facts[i].Id.ToString(),
                        Annotations = new DiagramObjectCollection<ShapeAnnotation>()
                        {
                            new ShapeAnnotation() { Content = facts[i].Title }
                        },
                        OffsetY = 100 * i,
                        OffsetX = 200
                    }
                );
            }

            root = facts[0].Title;

            for (int i = 0; i < connections.Count; i++)
            {
                connectors.Add(new Connector()
                    {
                        ID = connections[i].Id.ToString(),
                        SourceID = connections[i].StartPointId.ToString(),
                        TargetID = connections[i].EndPointId.ToString(),
                        Constraints = (ConnectorConstraints)0x2363E
                    }
                );
            }

            comments = await commentService.GetCommentsByConnectionAsync(1);
        }
    }

    //Creates connectors with some default values.
    private void OnConnectorCreating(IDiagramObject connector)
    {
        (connector as Connector).Type = ConnectorSegmentType.Straight;
    }

    private void NodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.Width = 60;
        node.Height = 60;
    }

    private void ConnectorCreating(IDiagramObject connector)
    {
        (connector as Connector).Type = ConnectorSegmentType.Bezier;
        (connector as Connector).TargetDecorator = new DecoratorSettings
        {
            Shape = DecoratorShape.Arrow,
        };
    }

    private void ShowCloseCreateDialog()
    {
        if (!isCreateConnectionOpen)
        {
            isCreateDialogOpen = !isCreateDialogOpen;
        }
    }

    private void ShowCloseConnectionDialog()
    {
        isCreateConnectionOpen = !isCreateConnectionOpen;
    }

    private void AddNodeConnection(string s)
    {
        nodeConnectionCount++;
    }

    private void RemoveNodeConnection(string s)
    {
        if (nodeConnectionCount > 1)
        {
            nodeConnectionCount--;
        }
    }

    private void AddConnection()
    {
        connectionsCount++;
    }

    private void RemoveConnection()
    {
        if (connectionsCount > 1)
        {
            connectionsCount--;
        }
    }

    private void CancelCreateNodeConnection()
    {
        nodeConnectionCount = 1;
        isCreateDialogOpen = false;
    }

    private void SubmitNode()
    {
        nodeConnectionCount = 1;
        Fact newFact = new Fact()
        {
            CanvasId = canvasId,
            Title = factTitle,
            Description = factDescription
        };

        factService.AddFact(newFact);
    }

    private void CancelCreateConnections()
    {
        connectionsCount = 1;
        isCreateConnectionOpen = false;
    }

    private void SubmitConnections(IEnumerable<string> selectedFromFactTitle, IEnumerable<string> selectedToFactTitle)
    {
        connectionsCount = 1;
        Fact fromFact = facts.Where(x => x.Title == selectedFromFactTitle.First().ToString()).First();
        Fact toFact = facts.Where(x => x.Title == selectedToFactTitle.First().ToString()).First();

        connService.AddConnection(fromFact, toFact);
    }

    public void OnSelectionChanged(SelectionChangedEventArgs args)
    {
        selectedNodes.Clear();
        selectedConnectors.Clear();
        if (args.NewValue.Count > 0)
        {
            foreach (var selected in args.NewValue)
            {
                if (selected.GetType().Name == "Node")
                {
                    Node selNode = (Node)selected;
                    selectedNodes.Add(selNode);
                }
                else
                {
                    selectedConnectors.Add((Connector)selected);
                    isShowCommentsBtnDisabled = false;
                }
            }

            if (selectedNodes.Count > 0)
            {
                isCreateConnectionBtnDisabled = false;
                isShowCommentsBtnDisabled = true;
            }
        }
        else
        {
            isCreateConnectionBtnDisabled = true;
            isShowCommentsBtnDisabled = true;
        }
    }

    private async Task ShowSummary()
    {
        ShowCanvas = !ShowCanvas;
        await ShowCanvasChanged.InvokeAsync(ShowCanvas);
    }

    private void ShowComments()
    {
        var dialogParams = new DialogParameters
            {
                ["Comments"] = comments,
                ["UserId"] = userId,
                ["ConnectionId"] = int.Parse(selectedConnectors.First().ID)
            };

        //isCommentsPanelHidden = false;
        var options = new DialogOptions { CloseOnEscapeKey = true };
        dialogService.Show<CommentsComponent>("Comments", dialogParams, options);
    }


    private void OpenVoteDialog()
    {
        DialogOptions options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };

        //dialogService.Show<VoteConnection>("Vote", options);
    }

}